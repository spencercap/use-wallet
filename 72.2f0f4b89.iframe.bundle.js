(self.webpackChunk_txnlab_use_wallet=self.webpackChunk_txnlab_use_wallet||[]).push([[72],{"./node_modules/@randlabs/communication-bridge/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/@randlabs/communication-bridge/lib/messenger.js")},"./node_modules/@randlabs/communication-bridge/lib/messenger.js":module=>{module.exports=class Messenger{constructor(channelName,onMessageCallback){this.channelName=channelName,this.onMessage=onMessageCallback,this._installListener(),this._requests=new Map,this._nextId=0,this._defaultTimeout=4e3}_installListener(){const that=this;this._listener=function(event){if(!event.data||"string"!=typeof event.data)return;let json;try{if(json=JSON.parse(event.data),!json.channel||json.channel!==that.channelName)return;if("object"!=typeof json.message)return}catch(err){return}if(void 0!==json.replyId){if("number"!=typeof json.replyId||json.replyId%1!=0)return;const req=that._requests.get(json.replyId);if(req){if(event.origin!==req.targetOrigin)return;clearTimeout(req.timeout),that._requests.delete(json.replyId),req.resolve(json.message)}}else{if("number"!=typeof json.id||json.id%1!=0||!that.onMessage)return;const channel=that.channelName,replyId=json.id,origin=event.origin,replyMessage=function(message){const request={channel,replyId,message};event.source.postMessage(JSON.stringify(request),origin)};that.onMessage(json.message,event.origin,event.source,replyMessage,that)}},window.addEventListener("message",this._listener)}sendMessage(targetWindow,message,origin,options){let targetOrigin;try{targetOrigin=new URL(origin).origin}catch(e){throw new Error("Invalid origin URL")}const request={channel:this.channelName,id:this.getNextId(),message};if(options&&options.waitForReply){const that=this;return new Promise((function(resolve,reject){const timeout=setTimeout((function(){that._requests.get(request.id)&&(that._requests.delete(request.id),reject(new Error("Timeout expired for the message response")))}),options&&options.timeout?options.timeout:that._defaultTimeout);that._requests.set(request.id,{timeout,resolve,targetOrigin}),targetWindow.postMessage(JSON.stringify(request),targetOrigin)}))}targetWindow.postMessage(JSON.stringify(request),targetOrigin)}close(){window.removeEventListener("message",this._listener),this._listener=null,delete this._requests}getNextId(){return this._nextId+=1,this._nextId}}},"./node_modules/@randlabs/myalgo-connect/index.js":(module,__unused_webpack_exports,__webpack_require__)=>{module.exports=__webpack_require__("./node_modules/@randlabs/myalgo-connect/lib/main.js")},"./node_modules/@randlabs/myalgo-connect/lib/main.js":(module,__unused_webpack_exports,__webpack_require__)=>{const{openPopup}=__webpack_require__("./node_modules/@randlabs/myalgo-connect/lib/popup/popup.js"),{sleep,prepareTxn}=__webpack_require__("./node_modules/@randlabs/myalgo-connect/lib/utils/utils.js"),Errors=__webpack_require__("./node_modules/@randlabs/myalgo-connect/lib/utils/errors.js"),Messaging=__webpack_require__("./node_modules/@randlabs/myalgo-connect/lib/messaging/Messaging.js");let bridge=null;module.exports=class MyAlgoConnect{constructor(options){bridge||(bridge=new Messaging),this.bridge=bridge,this.timeout=options&&options.timeout?options.timeout:16e5,this.url=options&&options.bridgeUrl?options.bridgeUrl:"https://wallet.myalgo.com/bridge",this.url.endsWith("/")&&(this.url=this.url.slice(0,-1)),this.currentConnectPopup=null,this.currentSigntxPopup=null,this.currentSignLogicSigPopup=null,this.currentTealSignPopup=null,this.currentSignBytesPopup=null,this.options={waitForReply:!0,timeout:this.timeout},this.disableLedgerNano=!(!options||!options.disableLedgerNano)&&options.disableLedgerNano}async connect(settings={shouldSelectOneAccount:!1,openManager:!1}){this.currentConnectPopup&&(this.currentConnectPopup.closed?this.currentConnectPopup=null:this.focusWindow(this.currentConnectPopup));try{this.currentConnectPopup=openPopup(this.url+"/connect.html"),await this.waitForWindowToLoad(this.currentConnectPopup);const res=await this.bridge.sendMessage(this.currentConnectPopup,{method:"unlock",params:Object.assign(settings,{disableLedgerNano:this.disableLedgerNano})},this.url,this.options);if(this.closeWindow(this.currentConnectPopup),this.currentConnectPopup=null,"error"===res.status)throw new Error(res.message);return res.data.accounts}catch(err){throw this.closeWindow(this.currentConnectPopup),this.currentConnectPopup=null,err}}async signTransaction(transaction,signOptions){let txn;this.currentSigntxPopup&&(this.currentSigntxPopup.closed?this.currentSigntxPopup=null:this.focusWindow(this.currentSigntxPopup)),txn=Array.isArray(transaction)?Array.from(transaction).map((tx=>prepareTxn(tx))):prepareTxn(transaction);try{this.currentSigntxPopup=openPopup(this.url+"/signtx.html"),await this.waitForWindowToLoad(this.currentSigntxPopup);const res=await this.bridge.sendMessage(this.currentSigntxPopup,{method:"transaction",params:{txn,settings:{disableLedgerNano:this.disableLedgerNano},options:signOptions}},this.url,this.options);if(this.closeWindow(this.currentSigntxPopup),this.currentSigntxPopup=null,"error"===res.status)throw new Error(res.message);if(Array.isArray(res.data)){const result=[];for(const t of res.data)t.blob=new Uint8Array(Buffer.from(t.blob,"hex")),result.push(t);return result}return res.data.blob=new Uint8Array(Buffer.from(res.data.blob,"hex")),res.data}catch(err){throw this.closeWindow(this.currentSigntxPopup),this.currentSigntxPopup=null,err}}async signLogicSig(logic,address){this.currentSignLogicSigPopup&&(this.currentSignLogicSigPopup.closed?this.currentSignLogicSigPopup=null:this.focusWindow(this.currentSignLogicSigPopup));try{this.currentSignLogicSigPopup=openPopup(this.url+"/logicsigtx.html"),await this.waitForWindowToLoad(this.currentSignLogicSigPopup);let logicInBase64=logic;logic.constructor===Uint8Array&&(logicInBase64=Buffer.from(logic).toString("base64"));const res=await this.bridge.sendMessage(this.currentSignLogicSigPopup,{method:"logicsig",params:{logic:logicInBase64,address}},this.url,this.options);if(this.closeWindow(this.currentSignLogicSigPopup),this.currentSignLogicSigPopup=null,"error"===res.status)throw new Error(res.message);return new Uint8Array(Buffer.from(res.data.signedTeal,"base64"))}catch(err){throw this.closeWindow(this.currentSignLogicSigPopup),this.currentSignLogicSigPopup=null,err}}async tealSign(data,contractAddress,address){this.currentTealSignPopup&&(this.currentTealSignPopup.closed?this.currentTealSignPopup=null:this.focusWindow(this.currentTealSignPopup));try{this.currentTealSignPopup=openPopup(this.url+"/tealsign.html"),await this.waitForWindowToLoad(this.currentTealSignPopup);let dataInBase64=data;data.constructor===Uint8Array&&(dataInBase64=Buffer.from(data).toString("base64"));const res=await this.bridge.sendMessage(this.currentTealSignPopup,{method:"tealsign",params:{data:dataInBase64,contractAddress,address}},this.url,this.options);if(this.closeWindow(this.currentTealSignPopup),this.currentTealSignPopup=null,"error"===res.status)throw new Error(res.message);return new Uint8Array(Buffer.from(res.data.signature,"base64"))}catch(err){throw this.closeWindow(this.currentTealSignPopup),this.currentTealSignPopup=null,err}}async signBytes(bytes,address){this.currentSignBytesPopup&&(this.currentSignBytesPopup.closed?this.currentSignBytesPopup=null:this.focusWindow(this.currentSignBytesPopup));try{this.currentSignBytesPopup=openPopup(this.url+"/signbytes.html"),await this.waitForWindowToLoad(this.currentSignBytesPopup);let messageInBase64=Buffer.from(bytes).toString("base64");const res=await this.bridge.sendMessage(this.currentSignBytesPopup,{method:"signbytes",params:{data:messageInBase64,address}},this.url,this.options);if(this.closeWindow(this.currentSignBytesPopup),this.currentSignBytesPopup=null,"error"===res.status)throw new Error(res.message);return new Uint8Array(Buffer.from(res.data.signature,"base64"))}catch(err){throw this.closeWindow(this.currentSignBytesPopup),this.currentSignBytesPopup=null,err}}async waitForWindowToLoad(targetWindow,retries=30){for(let i=0;i<retries&&(await sleep(300),targetWindow);i++)try{if("success"==(await bridge.sendMessage(targetWindow,{method:"status"},this.url)).status)return}catch(err){}throw new Error(Errors.WINDOW_NOT_LOADED)}closeWindow(window){window&&!window.closed&&window.close&&window.close()}focusWindow(window){throw window&&window.focus?(window.focus(),new Error(Errors.WINDOW_IS_OPENED)):new Error(Errors.INVALID_WINDOW)}}},"./node_modules/@randlabs/myalgo-connect/lib/messaging/Messaging.js":(module,__unused_webpack_exports,__webpack_require__)=>{const Messenger=__webpack_require__("./node_modules/@randlabs/communication-bridge/index.js");module.exports=class Messaging{constructor(listenerCallback){const that=this;this.options={waitForReply:!0,timeout:250},this.listenerCallback=listenerCallback,this.bridge=new Messenger("wallet-bridge-communication-channel",(function(req,source,cb,bridge){that.listenerCallback&&that.listenerCallback(req,cb)}))}sendMessage(window,request,origin,options){return this.bridge.sendMessage(window,request,origin,options||this.options)}setNewListener(listenerCallback){this.listenerCallback=listenerCallback}close(){this.bridge.close()}}},"./node_modules/@randlabs/myalgo-connect/lib/popup/popup.js":(module,__unused_webpack_exports,__webpack_require__)=>{const{WINDOW_NOT_OPENED}=__webpack_require__("./node_modules/@randlabs/myalgo-connect/lib/utils/errors.js"),defaultOptions={width:400,height:600};module.exports={openPopup:function openPopup(url,options=defaultOptions){let{name="",width,height,top=0,left=0}=options;width&&(window.outerWidth?left=Math.round((window.outerWidth-width)/2)+window.screenX:window.screen.width&&(left=Math.round((window.screen.width-width)/2))),height&&(window.outerHeight?top=Math.round((window.outerHeight-height)/2)+window.screenY:window.screen.height&&(top=Math.round((window.screen.height-height)/2))),width&&height&&(options={top,left,width,height,status:1,toolbar:0,menubar:0,resizable:1,scrollbars:1});const params=Object.keys(options).map((key=>{const param=options[key];if(null!=param&&"function"==typeof param.toString)return`${key}=${param.toString()}`})).filter(Boolean).join(",");let win;try{win=window.open(url,name,params)}catch(err){throw new Error(`${WINDOW_NOT_OPENED} - ${err.stack||err.message}`)}if(!win||window.closed)throw new Error(`${WINDOW_NOT_OPENED} - blocked`);return win}}},"./node_modules/@randlabs/myalgo-connect/lib/utils/errors.js":module=>{module.exports={WINDOW_NOT_LOADED:"Window not loaded",WINDOW_IS_OPENED:"Windows is opened",WINDOW_NOT_OPENED:"Can not open popup window",INVALID_WINDOW:"Invalid window"}},"./node_modules/@randlabs/myalgo-connect/lib/utils/utils.js":module=>{module.exports={sleep:function sleep(msec=200){return new Promise((resolve=>setTimeout(resolve,msec)))},prepareTxn:function prepareTxn(transaction){if(transaction.constructor===Uint8Array)return Buffer.from(transaction).toString("base64");if("string"==typeof transaction)return transaction;const txn=Object.assign({},transaction);if(txn.note&&txn.note.constructor===Uint8Array&&(txn.note=Buffer.from(txn.note).toString("base64")),txn.assetMetadataHash&&txn.assetMetadataHash.constructor===Uint8Array&&(txn.assetMetadataHash=Buffer.from(txn.assetMetadataHash).toString("base64")),txn.group&&txn.group.constructor===Uint8Array&&(txn.group=Buffer.from(txn.group).toString("base64")),"appl"===txn.type&&txn.appApprovalProgram&&txn.appApprovalProgram.constructor===Uint8Array&&(txn.appApprovalProgram=Buffer.from(txn.appApprovalProgram).toString("base64")),"appl"===txn.type&&txn.appClearProgram&&txn.appClearProgram.constructor===Uint8Array&&(txn.appClearProgram=Buffer.from(txn.appClearProgram).toString("base64")),"appl"===txn.type&&txn.appArgs&&txn.appArgs.length>0)for(let i=0;i<txn.appArgs.length;i++)txn.appArgs[i].constructor===Uint8Array&&(txn.appArgs[i]=Buffer.from(txn.appArgs[i]).toString("base64"));return txn}}}}]);